// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: starwars.capnp

#include "starwars.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<43> b_b6e8819be93c7224 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     36, 114,  60, 233, 155, 129, 232, 182,
     15,   0,   0,   0,   3,   0,   0,   0,
    158, 178, 212, 189, 126, 189, 254, 191,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0, 135,   0,   0,   0,
    125,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 119,  97, 114, 115,
     46,  99,  97, 112, 110, 112,  58,  83,
    116,  97, 114,  87,  97, 114, 115,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    130,  70, 105,  75,  87,  77, 212, 217,
      1,   0,   0,   0,  50,   0,   0,   0,
     72, 117, 109,  97, 110,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     60, 192, 195, 213,  93,  52, 121, 227,
    130,  70, 105,  75,  87,  77, 212, 217,
     49,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    130,  70, 105,  75,  87,  77, 212, 217,
    130,  70, 105,  75,  87,  77, 212, 217,
     29,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,   7,   0,   0,   0,
    115, 104, 111, 119,  72, 117, 109,  97,
    110,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
     99, 114, 101,  97, 116, 101,  72, 117,
    109,  97, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_b6e8819be93c7224 = b_b6e8819be93c7224.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_b6e8819be93c7224[] = {
  &s_d9d44d574b694682,
  &s_e379345dd5c3c03c,
};
static const uint16_t m_b6e8819be93c7224[] = {1, 0};
const ::capnp::_::RawSchema s_b6e8819be93c7224 = {
  0xb6e8819be93c7224, b_b6e8819be93c7224.words, 43, d_b6e8819be93c7224, m_b6e8819be93c7224,
  2, 2, nullptr, nullptr, nullptr, { &s_b6e8819be93c7224, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<84> b_d9d44d574b694682 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    130,  70, 105,  75,  87,  77, 212, 217,
     24,   0,   0,   0,   1,   0,   1,   0,
     36, 114,  60, 233, 155, 129, 232, 182,
      3,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 242,   0,   0,   0,
     33,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 119,  97, 114, 115,
     46,  99,  97, 112, 110, 112,  58,  83,
    116,  97, 114,  87,  97, 114, 115,  46,
     72, 117, 109,  97, 110,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
    141, 200, 218, 213, 146, 169, 130, 177,
      1,   0,   0,   0,  82,   0,   0,   0,
     65, 112, 112, 101,  97, 114, 115,  73,
    110,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,   0,   0,   0,   3,   0,   1,   0,
    124,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110,  97, 109, 101,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 111, 109, 101,  80, 108,  97, 110,
    101, 116,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 112, 112, 101,  97, 114, 115,  73,
    110,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    141, 200, 218, 213, 146, 169, 130, 177,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d9d44d574b694682 = b_d9d44d574b694682.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d9d44d574b694682[] = {
  &s_b182a992d5dac88d,
};
static const uint16_t m_d9d44d574b694682[] = {3, 2, 0, 1};
static const uint16_t i_d9d44d574b694682[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_d9d44d574b694682 = {
  0xd9d44d574b694682, b_d9d44d574b694682.words, 84, d_d9d44d574b694682, m_d9d44d574b694682,
  1, 4, i_d9d44d574b694682, nullptr, nullptr, { &s_d9d44d574b694682, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<31> b_b182a992d5dac88d = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    141, 200, 218, 213, 146, 169, 130, 177,
     30,   0,   0,   0,   2,   0,   0,   0,
    130,  70, 105,  75,  87,  77, 212, 217,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  66,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  79,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 119,  97, 114, 115,
     46,  99,  97, 112, 110, 112,  58,  83,
    116,  97, 114,  87,  97, 114, 115,  46,
     72, 117, 109,  97, 110,  46,  65, 112,
    112, 101,  97, 114, 115,  73, 110,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 101, 119,  72, 111, 112, 101,   0,
    101, 109, 112, 105, 114, 101,   0,   0,
    106, 101, 100, 105,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b182a992d5dac88d = b_b182a992d5dac88d.words;
#if !CAPNP_LITE
static const uint16_t m_b182a992d5dac88d[] = {1, 2, 0};
const ::capnp::_::RawSchema s_b182a992d5dac88d = {
  0xb182a992d5dac88d, b_b182a992d5dac88d.words, 31, nullptr, m_b182a992d5dac88d,
  0, 3, nullptr, nullptr, nullptr, { &s_b182a992d5dac88d, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(AppearsIn_b182a992d5dac88d, b182a992d5dac88d);
static const ::capnp::_::AlignedData<34> b_e379345dd5c3c03c = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     60, 192, 195, 213,  93,  52, 121, 227,
     24,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  74,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 116,  97, 114, 119,  97, 114, 115,
     46,  99,  97, 112, 110, 112,  58,  83,
    116,  97, 114,  87,  97, 114, 115,  46,
    115, 104, 111, 119,  72, 117, 109,  97,
    110,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    105, 100,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e379345dd5c3c03c = b_e379345dd5c3c03c.words;
#if !CAPNP_LITE
static const uint16_t m_e379345dd5c3c03c[] = {0};
static const uint16_t i_e379345dd5c3c03c[] = {0};
const ::capnp::_::RawSchema s_e379345dd5c3c03c = {
  0xe379345dd5c3c03c, b_e379345dd5c3c03c.words, 34, nullptr, m_e379345dd5c3c03c,
  0, 1, i_e379345dd5c3c03c, nullptr, nullptr, { &s_e379345dd5c3c03c, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::StarWars::ShowHumanParams,  ::StarWars::Human>
StarWars::Client::showHumanRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::StarWars::ShowHumanParams,  ::StarWars::Human>(
      0xb6e8819be93c7224ull, 0, sizeHint);
}
::kj::Promise<void> StarWars::Server::showHuman(ShowHumanContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "starwars.capnp:StarWars", "showHuman",
      0xb6e8819be93c7224ull, 0);
}
::capnp::Request< ::StarWars::Human,  ::StarWars::Human>
StarWars::Client::createHumanRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::StarWars::Human,  ::StarWars::Human>(
      0xb6e8819be93c7224ull, 1, sizeHint);
}
::kj::Promise<void> StarWars::Server::createHuman(CreateHumanContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "starwars.capnp:StarWars", "createHuman",
      0xb6e8819be93c7224ull, 1);
}
::capnp::Capability::Server::DispatchCallResult StarWars::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xb6e8819be93c7224ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("starwars.capnp:StarWars", interfaceId);
  }
}
::capnp::Capability::Server::DispatchCallResult StarWars::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return {
        showHuman(::capnp::Capability::Server::internalGetTypedContext<
             ::StarWars::ShowHumanParams,  ::StarWars::Human>(context)),
        false
      };
    case 1:
      return {
        createHuman(::capnp::Capability::Server::internalGetTypedContext<
             ::StarWars::Human,  ::StarWars::Human>(context)),
        false
      };
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "starwars.capnp:StarWars",
          0xb6e8819be93c7224ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// StarWars
#if !CAPNP_LITE
constexpr ::capnp::Kind StarWars::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StarWars::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// StarWars::Human
constexpr uint16_t StarWars::Human::_capnpPrivate::dataWordSize;
constexpr uint16_t StarWars::Human::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind StarWars::Human::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StarWars::Human::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// StarWars::ShowHumanParams
constexpr uint16_t StarWars::ShowHumanParams::_capnpPrivate::dataWordSize;
constexpr uint16_t StarWars::ShowHumanParams::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind StarWars::ShowHumanParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* StarWars::ShowHumanParams::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



